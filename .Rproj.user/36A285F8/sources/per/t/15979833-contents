library(sp)
library(imputeTS)
library(ggplot2)
library(ggmap)
library(data.table)
library(cowplot)
library(corrplot)
library(summarytools)
library(dplyr)
library(MASS)
library(purrr)
library(RColorBrewer)
library(tibble)
library(tidyr)
library(ggpubr)
library(egg)
library(grid)
library(kableExtra)
library(magrittr)
library(gt)
library(webshot2)
library(xtable)
library(knitr)
library(tinytex)
library(stringr)
library(ggpmisc)
library(ggtext)
library(fs)
library(stringi)
library(jsonlite)
library(shinyjs)
library(tools)
library(assertthat)
library(plotrix)
library(rlang)
library(shinydashboard)
library(shinythemes)
library(broom)
library(reactable)
library(Hmisc)
library(stats)
library(gtable)
library(shinydashboardPlus)
library(shinyWidgets)
library(rhandsontable)
library(rio)
library(janitor)
library(flextable)
library(lubridate)
library(shiny)
library(plotly)
library(gridExtra)
library(shinybusy)
library(DT)
library(future)
library(promises)


# Increase upload size limit:
options(shiny.maxRequestSize = 100*1024*1024)  # 100 MB
rainbow_colors <- c(
  "#F09EA7", "#F6CA94", "#FAFABE",
  "#C1EDC0", "#C7CAFF", "#CDABEB", "#F6C2F3"
)


# Load external functions:
source('DLCAnalyzer_Functions_final.R')


## Define UI for the Shiny app:
ui <- fluidPage(
  useShinyjs(),
  tags$head(
    tags$style(HTML("hr {border-top: 1px solid #000000;}"),
               HTML(".shiny-notification {
                                              position:fixed;
                                              top: calc(10%);
                                              left: calc(33%);
                                              font-size: 150%;
                                              border: black 1px solid;
                                              background-color: #f7f2d9;
                                              width: 28%;}"
               ))
  ),
  div(style="padding: 1px 0px; width: '100%'",
      titlePanel(
        fluidRow(
          column(1,
                 img(src="Abimael_3000.jpeg",
                     width = 120,
                     height = 150,
                     class = "pull-right"
                 )),
          column(10,
                 h1("The Abimael Laboratory of Neurometabolism")),
          br(),
          br(),
          h4(tags$i("We want to beat disability"))  # This text is italicized by using tags$i
        )
      )
  ),
  
  fluidRow(
    column(12,
           hr(),
           h2("Mouse behavior analysis", style = "color:blue")
    )
  ),
  
  sidebarLayout(
    sidebarPanel(
      width= 2,
      numericInput("num_groups", "Number of Groups:", 2, min = 1),
      uiOutput("groupNamesInputs"),
      uiOutput("fileInputs"),
      # Center the button in the sidebar
      div(style = "text-align: center;",
          actionButton("runMovementAnalysis", "Run Analysis", style = "color: white; background-color: blue; width: 50%")
      )
    ),
    
    mainPanel(
      # Use tabsetPanel to create tabs
      tabsetPanel(
        id = "mainTabs",
        tabPanel("Metrics (mice area, length, etc.)",
                 # Place the elements for Metrics analysis here
                 uiOutput("bodyMetrics_plotly"),
                 div(id = "downloadPlotsDiv", downloadButton("download_bodyMetrics_plots", "Download Plots")),
                 # results table display
                 DT::dataTableOutput("bodyMetricsTable"),
                 div(id = "downloadTableDiv", downloadButton("download_bodyMetrics_Table", "Download Results Table"))
        ),
        tabPanel("Movement metrics (speed, distance, etc.)",
                 uiOutput('movement_plotly'),
                 div(id = "downloadPlotsDiv_2", downloadButton("download_movement_plots", "Download Plots")),
                 DTOutput("movement_table"),
                 div(id = "downloadTableDiv_2", downloadButton("download_movement_table", "Download Results Table"))
        ),
        # Movement metrics tab
        tabPanel("Tracking",
                 br(),
                 div(style = "margin-bottom: 10px;",
                     downloadButton("download_zone_density", "Download Zone Visits & Density Plots")),
                 br(),  # Add some space before the new download button
                 uiOutput("group_tab") # dynamic groups will appear here
                 
        )
      ),
      # Adjust the width ratio to give more space to the main panel
      widths = c(3, 9)
    )
  ),
  tags$style(type = "text/css", ".tab-content {overflow-y: scroll;}")
)

server <- function(input, output, session) {
  rv <- reactiveValues(
    body_static_boxplots = NULL,
    combined_body_metrics = NULL,
    TrackingAllbygroup = NULL,
    combined_movement = NULL,
    movement_boxplots = NULL,
    tracking_results = list(),
    tracking_combined = list(),
    tracking_combined_plot = NULL,
    zone = list(),
    density = list()
  )
  
  all_data <- list()  # To store data from all groups
  TrackingAll <- list()
  
  
  # Dynamically generate textInput for group names
  output$groupNamesInputs <- renderUI({
    lapply(1:input$num_groups, function(i) {
      textInput(paste0("group_name", i), paste0("Name for Group ", i), value = paste("Group", i))
    })
  })
  
  # Dynamically generate fileInput based on number of groups
  output$fileInputs <- renderUI({
    lapply(1:input$num_groups, function(i) {
      fileInput(paste0("file", i), paste0("Upload Files for ", input[[paste0("group_name", i)]]), multiple = TRUE)
    })
  })
  
  
  
  # Initially hide the download buttons
  shinyjs::hide("downloadtrackingPlotsDiv")
  shinyjs::hide("downloadData")
  shinyjs::hide("downloadPlotsDiv_2")
  shinyjs::hide("downloadTableDiv_2")
  shinyjs::hide("downloadPlotsDiv")
  shinyjs::hide("downloadTableDiv")
  
  
  observeEvent(input$runMovementAnalysis, {
    req(input$num_groups)
    n_groups <- input$num_groups
    groupName <- sapply(seq_len(input$num_groups), function(i) input[[paste0("group_name", i)]])
    
    # rest tracking completion flag
    rv$tracking_complete <- FALSE
    
    # =============================================
    # PART 1: Immediate Execution (Body Metrics & Movement)
    # =============================================
    
    # show modal progress dialog
    show_modal_spinner(spin = "atom",
                       text = "Processing body metrics...")
    
    # part I: body metrics and movement analysis
    all_body_metrics <- list() # initiate an empty list to store all group data
    all_movement <- list()
    zone_list <- setNames(vector("list", n_groups), groupName)
    density_list <- setNames(vector("list", n_groups), groupName)
    
    for (i in 1:n_groups) {
      files <- input[[paste0("file", i)]]
      
      # update progress
      update_modal_spinner(text = paste("Processing body metrics of Group", i, " - ", nrow(files), "files..."))
      
      if (!is.null(files)) {
        
        # preserve original names
        TrackingAll <- withCallingHandlers(
          {
            RunPipeline(files$datapath, FUN = pipeline)
            
          },
          warning = function(w) {
            if (grepl("no label data present", conditionMessage(w))) {
              invokeRestart("muffleWarning") # Suppress warning "no label data present" (it's OK)
            }
          }
        )
        names(TrackingAll) <- files$name
        rv$TrackingAllbygroup[[groupName[[i]]]] <- TrackingAll
        
        
        # ============ 1st tab - body metrics
        
        body_metrics <- calculate_body_metrics(TrackingAll) # group = "Control|Mutant" extract from file name
        body_metrics$group <- groupName[[i]] # assign the group name to the data
        
        # store the results for this group with descriptive name
        all_body_metrics[[i]] <- body_metrics
        
        # ============ running 2rd tab - movement analysis
        update_modal_spinner(text = paste("Processing movements of Group", i, " - ", nrow(files), "files..."))
        movement <- calculate_movement(TrackingAll)
        movement$group <- groupName[[i]]
        all_movement[[groupName[[i]]]] <- movement
        
        # ============ 3rd tab - tracking - zone & density
        zone_list[[groupName[[i]]]] <- plot_time_in_zones(TrackingAll, groupName[[i]], colors = rainbow_colors)
        density_list[[groupName[[i]]]] <- generate_density_plots(TrackingAll, groupName[[i]])
        
        # ============ 3rd tab - tracking - consolidated
        results <- apply_all_functions(TrackingAll)
        results$df$group <- groupName[[i]]  # Assign the group name to the data
        all_data[[groupName[[i]]]] <- results$df  # Store data from each group
        
      }
    }
    
    
    consolidated_data <- do.call(rbind, all_data)
    print(consolidated_data) # Check the first few rows of the combined data frame
    
    # combine all groups into one data frame
    rv$combined_body_metrics <- do.call(rbind, all_body_metrics)
    
    # update progress (body_metrics boxplots)
    update_modal_spinner(text = "Preparing boxplots of bodyMetrics...")
    
    # update reactive list zone & density
    rv$zone <- zone_list
    rv$density <- density_list
    
    # create boxplot
    # y_label list
    rv$body_static_boxplots <- create_static_boxplot(rv$combined_body_metrics, 
                                                     y_label_map = BodyMetrics_y_label,
                                                     fill_colors = rainbow_colors)
    
    # render interactive boxplots
    render_boxplots_interactive(rv$body_static_boxplots, output_id_prefix = "body_plotly")
    
    # 2rd tab - movement
    rv$combined_movement <- do.call(rbind, all_movement)
    
    # update progress (movement boxplots)
    update_modal_spinner(text = "Preparing boxplots of movement data...")
    
    # create boxplot
    # y_label list outsource
    rv$movement_boxplots <- create_static_boxplot(rv$combined_movement,
                                                  y_label_map = movement_y_label,
                                                  fill_colors = rainbow_colors)
    
    # render interactive boxplots
    render_boxplots_interactive(rv$movement_boxplots, output_id_prefix = "movement_plotly")
    
    # Show the download buttons for bodyMetrics and movement
    shinyjs::show("downloadPlotsDiv_2")
    shinyjs::show("downloadTableDiv_2")
    shinyjs::show("downloadPlotsDiv")
    shinyjs::show("downloadTableDiv")
    
    # =============================================
    # PART 2: Async Execution (Tracking Analysis)
    # =============================================
    
    update_modal_spinner(text = "Starting Tracking analysis...")
    
    # dynamically generate subpanel on tracking panel based on number of groups
    output$group_tab <- renderUI({
      req(input$num_groups)
      
      
      # Create tabs for each group
      tabs <- lapply(1:n_groups, function(i) {
        tabPanel(
          title = paste("Group", i),
          # fluidRow inside each tab: left for zone plots, right for density
          fluidRow(
            column(
              width = 6,
              uiOutput(paste0("group", i, "_zone_plots"))
            ),
            column(
              width = 6,
              uiOutput(paste0("group", i, "_density_plots"))
            )
          )
        )
      })
      
      # add the result tab at the end
      tabs <- c(tabs, list(
        tabPanel(
          title = "Results",
          fluidRow(
            column(7, plotOutput("combined_plot"),
                   div(style = "margin-top: 20px;", downloadButton("download_combined_plots", "Download Plots"))),
            column(5, DTOutput("tracking_table"),
                   div(style = "margin-top: 20px;", downloadButton("download_tracking_table", "Download Data")))
          ),
          fluidRow(
            column(12, 
                   h4("Coombined Tracking Summary"),
                   DTOutput("tracking_combined"),
                   div(style = "margin-top: 20px;", downloadButton("download_tracking_combined", "Download Data")))
          )
        )
      ))
      do.call(tabsetPanel, tabs)
    }) # end of tabs
    
    
    # third tab (must wrapped in the observeEvent as the reactive value)
    
    lapply(1:n_groups, function(i) {
      # zone plots
      output[[paste0("group", i, "_zone_plots")]] <- renderUI({
        plot_output_list <- lapply(1:length(zone_list[[i]]), function(j) {
          plotname <- paste0("group", i, "_zone", j)
          plotOutput(plotname, height = "500px")
        })
        do.call(tagList, plot_output_list)
      })
      # render individual plots
      lapply(1:length(zone_list[[i]]), function(j) {
        output[[paste0("group", i, "_zone", j)]] <- renderPlot({
          zone_list[[i]][[j]]
        })
      })
      
      
      # density plots
      output[[paste0("group", i, "_density_plots")]] <- renderUI({
        group_plots <- density_list[[groupName[[i]]]]
        
        plot_output_list <- lapply(seq_along(group_plots), function(j) {
          plotname <- paste0("group", i, "_density", j)
          plotOutput(plotname, height = "500px")
        })
        do.call(tagList, plot_output_list)
      })
      
      lapply(seq_along(density_list[[groupName[[i]]]]), function(j) {
        output[[paste0("group", i, "_density", j)]] <- renderPlot({
          print(density_list[[groupName[[i]]]][[j]])
        })
      })
    })
    
    
    # =============================================
    # start async processing
    
    future({
      # loading required package
      # you can consider future is a new R session
      library(lubridate)
      library(plotly)
      library(promises)
      
      # isolate reactive dependencies
      num_groups <- isolate(input$num_groups)
      groupName <- sapply(1:n_groups, function(i) isolate(input[[paste0("group_name", i)]]))
      tracking_data <- isolate(rv$TrackingAllbygroup)
      
      selected_points <- c("Head")
      selected_zones <- c("center", "periphery")
      
      analysis_results <- list()
      
      for (i in 1:num_groups) {
        # run analysis and plot generation on the group's data
        group_analysis_result <- analyze_tracking(
          tracking_data[[groupName[[i]]]], selected_points, selected_zones, groupName[[i]]
        )
        
        analysis_results[[groupName[[i]]]] <- group_analysis_result$summary
      }
      
      if (length(analysis_results) > 0) {
        combined_analysis <- data.frame()
        
        for (groupName in names(analysis_results)) {
          combined_analysis <- rbind(combined_analysis, analysis_results[[groupName]])
        }
        
        
        combined_analysis_grouped <- combined_analysis %>%
          group_by(group, zone) %>%
          summarise(mean_percentage = mean(percentage), sd_percentage = sd(percentage), .groups = "drop")
        
        combined_analysis_grouped <- combined_analysis_grouped %>%
          mutate(p_value = NA_real_, significance = NA_character_)
        
        all_posthoc_results <- data.frame()
        
        for (zone_name in unique(combined_analysis$zone)) {
          data_sub <- combined_analysis %>% filter(zone == zone_name)
          
          if (length(unique(data_sub$group)) == 2 && all(table(data_sub$group) >= 3)) {
            t_test_results <- t.test(percentage ~ group, data = data_sub)
            combined_analysis_grouped <- combined_analysis_grouped %>%
              mutate(p_value = if_else(zone == zone_name, t_test_results$p.value, p_value),
                     significance = if_else(zone == zone_name, ifelse(p_value < 0.05, "p < 0.05", "ns"), significance))
          } else if(length(unique(data_sub$group)) > 2) {
            aov_results <- aov(percentage ~ group, data = data_sub)
            if(!is.null(aov_results)) {
              posthoc_results <- TukeyHSD(aov_results, "group")
              if("group" %in% names(posthoc_results)) {
                posthoc_df <- as.data.frame(posthoc_results$group) %>%
                  tibble::rownames_to_column(var = "comparison") %>%
                  tidyr::separate(comparison, into = c("group1", "group2"), sep = "-") %>%
                  dplyr::mutate(zone = zone_name, p_adj_value = p.adjust(`p adj`, method = "bonferroni"))
                
                # Append the results of this zone to the cumulative dataframe
                all_posthoc_results <- rbind(all_posthoc_results, posthoc_df)
              }
            }
          }
        }
      }
      
      
      
      
      # return raw data (no rendering here)
      list(
        analysis_results = analysis_results,
        combined_analysis = combined_analysis,
        posthoc_results = all_posthoc_results,
        combined_bygroup = combined_analysis_grouped
      )
    }) %...>% 
      (function(res) {
        rv$tracking_results <- res$posthoc_results
        rv$tracking_combined <- res$combined_analysis
        if (nrow(res$combined_bygroup) > 0) {
          combined_plot <- ggplot(res$combined_bygroup, aes(x = zone, y = mean_percentage, fill = group)) +
            geom_errorbar(aes(ymin = mean_percentage - sd_percentage, ymax = mean_percentage + sd_percentage),
                          width = 0.2, position = position_dodge(0.9)) +
            geom_bar(stat = "identity", position = position_dodge(), colour = "gray40") +
            scale_fill_manual(values = rainbow_colors) +
            theme_bw() +
            labs(x = "Zone", y = "Mean Percentage of Frames (%)", fill = "Group") +
            geom_text(aes(label = significance), position = position_dodge(width = 0.9), vjust = -1.5, check_overlap = TRUE) +
            theme(axis.text.x = element_text(angle = 45, hjust = 1))
          
          # Only create the table if more than two groups are compared
          if (length(unique(res$combined_bygroup$group)) > 2) {
            rv$tracking_results <- rv$tracking_results %>%
              dplyr::select(group1, group2, zone, p_adj_value)
            
            
          }
          
          rv$tracking_combined_plot <- combined_plot
        } else {
          print("The combined_analysis_grouped data frame is empty.")
        }
        
        
        
        
      }) # end of future
    
    
    remove_modal_spinner()
    
    
    
    
  }) # end of observeEvent/runMovementAnalysis
  
#  observeEvent(plotly::event_data("plotly_click", source = "1body_plotly" ), {
#    showModal(modalDialog(
#      size = "xl",
#      easyClose = TRUE,
#      renderPlotly({
#        p <- ggplotly(rv$body_static_boxplots[[1]]) %>%
#          config(displayModeBar = TRUE)
#      })
#    ))
#  })
  

  
  
  
  # Render the table in the main panel
  output$bodyMetricsTable <- renderDT({
    datatable(rv$combined_body_metrics,
              options = list(scrollX = TRUE, pageLength = 10),
              rownames = FALSE)
  })
  
  output$download_bodyMetrics_Table <- downloadHandler(
    filename = function() {
      paste("bodyMetrics_results_table_", Sys.Date(), ".csv")
    },
    content = function(file) {
      req(rv$combined_body_metrics)
      write.csv(rv$combined_body_metrics, file, row.names = FALSE)
    }
  )
  
  
  output$bodyMetrics_plotly <- renderUI({
    req(rv$body_static_boxplots)
    plot_output_list <- lapply(seq_along(rv$body_static_boxplots), function(i) {
      column(width = 4,
             plotlyOutput(paste0("body_plotly", i), height = "300px")
      )
    })
    # arrange in rows with 3 plots each
    rows <- split(plot_output_list, ceiling(seq_along(rv$body_static_boxplots)/3))
    rows <- lapply(rows, function(row) {
      fluidRow(do.call(tagList, row))
    })
    do.call(tagList, rows)
  })
  
  
  # PDF generation handler
  output$download_bodyMetrics_plots <- downloadHandler(
    filename = function() {
      paste0("body_metrics_boxplots_", Sys.Date(), ".pdf")
    },
    content = function(file) {
      req(rv$body_static_boxplots)
      save_boxplots_to_pdf(rv$body_static_boxplots, file, title = "Body Metrics Summary")
    }
  )
  
  ## second tab : movement
  # Render the table in the main panel
  output$movement_table <- renderDT({
    datatable(rv$combined_movement,
              options = list(scrollX = TRUE, pageLength = 10),
              rownames = FALSE)
  })
  
  
  output$download_movement_table <- downloadHandler(
    filename = function() {
      paste("Movement_results_table_", Sys.Date(), ".csv")
    },
    content = function(file) {
      req(rv$combined_movement)
      write.csv(rv$combined_movement, file, row.names = FALSE)
    }
  )
  
  
  output$movement_plotly <- renderUI({
    req(rv$movement_boxplots)
    plot_output_list <- lapply(seq_along(rv$movement_boxplots), function(i) {
      column(width = 4,
             plotlyOutput(paste0("movement_plotly", i), height = "300px")
      )
    })
    # arrange in rows with 3 plots each
    rows <- split(plot_output_list, ceiling(seq_along(rv$movement_boxplots)/3))
    rows <- lapply(rows, function(row) {
      fluidRow(do.call(tagList, row))
    })
    do.call(tagList, rows)
  })
  
  
  # PDF generation handler
  output$download_movement_plots <- downloadHandler(
    filename = function() {
      paste("movement_boxplots_", Sys.Date(), ".pdf")
    },
    content = function(file) {
      req(rv$movement_boxplots)
      save_boxplots_to_pdf(rv$movement_boxplots, file, title = "Movement Summary")
    }
  )
  
  # 3rd tab
  output$combined_plot <- renderPlot({
    req(rv$tracking_combined_plot)
    rv$tracking_combined_plot
  })
  
  output$download_combined_plots <- downloadHandler(
    filename = function() {
      paste0("combined_tracking_results_", Sys.Date(), ".pdf")
    },
    content = function(file) {
      req(rv$tracking_combined_plot, rv$tracking_results)
      
      df <- rv$tracking_results
      df$p_adj_value <- round(df$p_adj_value, 3)
      
      # convert table to grob
      table_grob <- gridExtra::tableGrob(rv$tracking_results, rows = NULL)
      
      # open PDF
      pdf(file, width = 8.5, height = 11)
      on.exit(dev.off())
      
      # arrange plot and table on same page
      gridExtra::grid.arrange(
        rv$tracking_combined_plot,
        table_grob,
        ncol = 1,
        heights = c(2/3, 1/3) # adjust split as needed
      )
    }
  )
  
  output$tracking_table <- renderDT({
    req(rv$tracking_results)
    datatable(rv$tracking_results, options = list(pageLength = 10))
  })
  
  output$download_tracking_table <- downloadHandler(
    filename = function() {
      "posthoc_results.csv"
    },
    content = function(file) {
      write.csv(rv$tracking_results, file, row.names = FALSE)
    }
  )
  
  output$tracking_combined <- renderDT({
    req(rv$tracking_combined)
    datatable(rv$tracking_combined)
  })
  
  output$download_tracking_combined <- downloadHandler(
    filename = function() {
      "tracking_analysis.csv"
    },
    content = function(file) {
      write.csv(rv$tracking_combined, file, row.names = FALSE)
    }
  )
  
  output$download_zone_density <- downloadHandler(
    filename = function() {
      paste0("zone_density_plots_", Sys.Date(), ".pdf")
    },
    content = function(file) {
      req(rv$zone, rv$density)
      
      pdf(file = file, width = 11, height = 8.5) # US letter
      on.exit(dev.off())
      
      max_pairs_per_page <- 2
      
      for (group in names(rv$zone)) {
        zone_plots <- rv$zone[[group]]
        density_plots <- rv$density[[group]]
        n <- length(zone_plots)
        
        total_pages <- ceiling(n / max_pairs_per_page)
        
        for (page in seq_len(total_pages)) {
          start <- (page - 1) * max_pairs_per_page + 1
          end <- min(page * max_pairs_per_page, n)
          
          # get plots for this page
          zone_subset <- zone_plots[start:end]
          density_subset <- density_plots[start:end]
          
          # pad to ensure 2 full pairs
          n_missing <- max_pairs_per_page - length(zone_subset)
          if (n_missing > 0) {
            padding <- req(list(nullGrob()), n_missing)
            zone_subset <- c(zone_subset, padding)
            density_subset <- c(density_subset, padding)
          }
          
          # create paired layout (each row = zone + density)
          paired_row <- lapply(seq_len(max_pairs_per_page), function(i) {
            arrangeGrob(zone_subset[[i]], density_subset[[i]], ncol = 2)
          })
          
          # Title for the page
          title_grob <- textGrob(
            paste("Zone Visits & Density Plots -", group),
            gp = gpar(fontsize = 16, fontface = "bold")
          )
          full_page <- arrangeGrob(
            title_grob,
            do.call(arrangeGrob, c(paired_row, list(ncol = 1))),
            ncol = 1,
            heights = unit(c(0.7, 7.5), "in")
          )
          if (!(group == names(rv$zone)[1] && page == 1)) {
            grid.newpage()
          }
          grid.draw(full_page)
        }
        
      }
    }
  )
  
  
  
  
}

# Run the app
shinyApp(ui = ui, server = server)